module stackADT
  implicit none

  type Stack
    integer, dimension(:,:), allocatable :: data
    integer :: size
  end type Stack

  contains

  subroutine push(stack, l, r)
    type(Stack) :: stack
    integer :: l, r

    stack.size = stack.size + 1
    allocate(stack.data(stack.size, 2))
    stack.data(stack.size, :) = [l, r]
  end subroutine push

  subroutine pop(stack, l, r)
    type(Stack) :: stack
    integer :: l, r

    l = stack.data(stack.size, 1)
    r = stack.data(stack.size, 2)
    deallocate(stack.data(stack.size, :))
    stack.size = stack.size - 1
  end subroutine pop

  function isEmpty(stack) result(empty)
    type(Stack) :: stack
    logical :: empty

    empty = (stack.size == 0)
  end function isEmpty

end module stackADT
